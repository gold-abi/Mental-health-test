# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a0Q_7QLNMx_-2iPp-SIQwXCagQrrV9ZM
"""

#!pip install streamlit

import streamlit as st
import numpy as np
import pickle
import joblib

model = joblib.load("mental_health_model.pkl")


# Load model and encoders
model = pickle.load(open("mental_health_model.pkl", "rb"))

# Streamlit UI
st.title("Mental Health Prediction App")

st.write("Please fill in the following information:")

age = st.number_input("Age", min_value=10, max_value=100)
gender = st.selectbox("Gender", ["Male", "Female", "Other"])
employment_status = st.selectbox("Employment Status", ["Employed", "Unemployed", "Student"])
work_environment = st.selectbox("Work Environment", ["Positive", "Neutral", "Negative"])
mental_health_history = st.selectbox("Mental Health History", ["Yes", "No"])
seeks_treatment = st.selectbox("Seeks Treatment", ["Yes", "No"])
stress_level = st.slider("Stress Level (1-10)", 1, 10)
sleep_hours = st.slider("Sleep Hours per Day", 0, 24)
physical_activity_days = st.slider("Physical Activity Days per Week", 0, 7)
depression_score = st.slider("Depression Score (1-10)", 1, 10)
anxiety_score = st.slider("Anxiety Score (1-10)", 1, 10)
social_support_score = st.slider("Social Support Score (1-10)", 1, 10)
productivity_score = st.slider("Productivity Score (0-10)", 0, 10)


# Manual encoding (should match training encoding)
gender_dict = {"Male": 1, "Female": 0, "Other": 2}
employment_dict = {"Employed": 0, "Unemployed": 1, "Student": 2}
env_dict = {"Positive": 0, "Neutral": 1, "Negative": 2}
yes_no_dict = {"Yes": 1, "No": 0}

input_features = [
    age,
    gender_dict[gender],
    employment_dict[employment_status],
    env_dict[work_environment],
    yes_no_dict[mental_health_history],
    yes_no_dict[seeks_treatment],
    stress_level,
    sleep_hours,
    physical_activity_days,
    depression_score,
    anxiety_score,
    social_support_score,
    productivity_score
]

# Predict
if st.button("Predict"):
    input_array = np.array(input_features).reshape(1, -1)
    prediction = model.predict(input_array)
    st.subheader("Prediction Result")
    st.write(f"Predicted Mental Health Risk Score: **{prediction[0]:.2f}**")

